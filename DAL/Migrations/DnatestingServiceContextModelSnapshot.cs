// <auto-generated />
using System;
using DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DnatestingServiceContext))]
    partial class DnatestingServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.BlogPost", b =>
                {
                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("createdDate");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("postID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("updateBy");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updatedDate");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPost", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("bookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateOnly?>("AppointmentDate")
                        .HasColumnType("date")
                        .HasColumnName("appointmentDate");

                    b.Property<DateOnly?>("BookingDate")
                        .HasColumnType("date")
                        .HasColumnName("bookingDate");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("note");

                    b.Property<int>("NumberSample")
                        .HasColumnType("int")
                        .HasColumnName("numberSample");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Chờ xác nhận")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("numeric(38, 2)")
                        .HasColumnName("totalPrice");

                    b.Property<int?>("UpdateBy")
                        .HasColumnType("int")
                        .HasColumnName("updateBy");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("updateDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__C6D03BED735C6CA1");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UpdateBy");

                    b.HasIndex("UserId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Consultant", b =>
                {
                    b.Property<int>("ConsultantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("consultantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultantId"));

                    b.Property<int?>("ConfirmBy")
                        .HasColumnType("int")
                        .HasColumnName("confirmBy");

                    b.Property<DateOnly>("ConsultantDate")
                        .HasColumnType("date")
                        .HasColumnName("consultantDate");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("createdDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("ConsultantId")
                        .HasName("PK__Consulta__8E3CA2DFA05216C0");

                    b.HasIndex("UserId");

                    b.ToTable("Consultant", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.DetailResult", b =>
                {
                    b.Property<int>("DetailResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("detailResultID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailResultId"));

                    b.Property<string>("LocusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("locusName");

                    b.Property<string>("P1Allele1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("p1Allele1");

                    b.Property<string>("P1Allele2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("p1Allele2");

                    b.Property<string>("P2Allele1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("p2Allele1");

                    b.Property<string>("P2Allele2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("p2Allele2");

                    b.Property<decimal?>("PaternityIndex")
                        .HasColumnType("decimal(18, 9)")
                        .HasColumnName("paternityIndex");

                    b.Property<int>("TestResultId")
                        .HasColumnType("int")
                        .HasColumnName("testResultID");

                    b.HasKey("DetailResultId")
                        .HasName("PK__DetailRe__7B658D46718D0C83");

                    b.HasIndex("TestResultId");

                    b.ToTable("DetailResult", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Answers")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answers");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingID");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<DateOnly?>("CreateDate")
                        .HasColumnType("date")
                        .HasColumnName("createDate");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateOnly?>("ReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("returnDate");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Hoạt động")
                        .HasColumnName("status");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__2613FDC47428A57A");

                    b.HasIndex(new[] { "BookingId" }, "UQ__Feedback__C6D03BEC18723438")
                        .IsUnique()
                        .HasFilter("[bookingID] IS NOT NULL");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Participant", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("participantID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParticipantId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("CollectionMethod")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("collectionMethod");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("IdentityNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("identityNumber");

                    b.Property<string>("QuestionalbleRelationship")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("questionalbleRelationship");

                    b.Property<string>("RelationshipToCustomer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("relationshipToCustomer");

                    b.HasKey("ParticipantId")
                        .HasName("PK__Particip__4EE792308B9F7FFD");

                    b.ToTable("Participant", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("amount");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingID");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("paymentDate");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentMethod");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Chờ xác nhận")
                        .HasColumnName("status");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__A0D9EFA693888D36");

                    b.HasIndex(new[] { "BookingId" }, "UQ__Payment__C6D03BEC52329F2D")
                        .IsUnique()
                        .HasFilter("[bookingID] IS NOT NULL");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__CD98460A65E2B3C3");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Sample", b =>
                {
                    b.Property<int>("SampleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sampleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SampleId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingID");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int")
                        .HasColumnName("participantID");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("receivedDate");

                    b.Property<string>("SampleType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sampleType");

                    b.Property<string>("TypeOfCollection")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("typeOfCollection");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("SampleId")
                        .HasName("PK__Sample__3FD4F24B4EB5FABC");

                    b.HasIndex("BookingId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("UserId");

                    b.ToTable("Sample", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("serviceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<decimal?>("ExtraSampleFee")
                        .HasColumnType("money")
                        .HasColumnName("extraSampleFee");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("packageType");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("serviceName");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("serviceType");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Hoạt động")
                        .HasColumnName("status");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__4550733F3DC3F25F");

                    b.ToTable("Service", null, t =>
                        {
                            t.HasTrigger("trg_AfterInsert_Service");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DAL.Entities.SurchargePrice", b =>
                {
                    b.Property<int>("SurchargeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("surchargeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurchargeId"));

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<string>("SampleType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sampleType");

                    b.Property<decimal?>("Surcharge")
                        .HasColumnType("money")
                        .HasColumnName("surcharge");

                    b.HasKey("SurchargeId")
                        .HasName("PK__Surcharg__F9327BEAB29C560D");

                    b.ToTable("SurchargePrice", null, t =>
                        {
                            t.HasTrigger("trg_AfterInsert_Surcharge");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DAL.Entities.TestResult", b =>
                {
                    b.Property<int>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("testResultID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestResultId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("bookingID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("createdBy");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("createdDate");

                    b.Property<string>("ResultConclution")
                        .HasColumnType("text")
                        .HasColumnName("resultConclution");

                    b.Property<DateOnly?>("ResultDate")
                        .HasColumnType("date")
                        .HasColumnName("resultDate");

                    b.Property<string>("ResultFile")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("resultFile");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("updatedBy");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date")
                        .HasColumnName("updatedDate");

                    b.HasKey("TestResultId")
                        .HasName("PK__TestResu__DD1FEAAD9D3F189A");

                    b.HasIndex(new[] { "BookingId" }, "UQ__TestResu__C6D03BECEBF34560")
                        .IsUnique();

                    b.ToTable("TestResult", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phoneNumber");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Hoạt động")
                        .HasColumnName("status");

                    b.HasKey("UserId")
                        .HasName("PK__User__CB9A1CDF7173C51B");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E6164D8437F0F")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("IncludeSurcharge", b =>
                {
                    b.Property<int>("SurchargeId")
                        .HasColumnType("int")
                        .HasColumnName("surchargeID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("serviceID");

                    b.HasKey("SurchargeId", "ServiceId")
                        .HasName("PK__IncludeS__1D677CD9E5ADDEC0");

                    b.HasIndex("ServiceId");

                    b.ToTable("IncludeSurcharge", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.BlogPost", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__BlogPost__userID__5070F446");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.HasOne("DAL.Entities.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__service__35BCFE0A");

                    b.HasOne("DAL.Entities.User", "UpdateByNavigation")
                        .WithMany("BookingUpdateByNavigations")
                        .HasForeignKey("UpdateBy")
                        .HasConstraintName("FK__Booking__updateB__36B12243");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("BookingUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__userID__34C8D9D1");

                    b.Navigation("Service");

                    b.Navigation("UpdateByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Consultant", b =>
                {
                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Consultants")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Consultan__userI__534D60F1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.DetailResult", b =>
                {
                    b.HasOne("DAL.Entities.TestResult", "TestResult")
                        .WithMany("DetailResults")
                        .HasForeignKey("TestResultId")
                        .IsRequired()
                        .HasConstraintName("FK__DetailRes__testR__47DBAE45");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("DAL.Entities.Feedback", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithOne("Feedback")
                        .HasForeignKey("DAL.Entities.Feedback", "BookingId")
                        .HasConstraintName("FK__Feedback__bookin__412EB0B6");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("DAL.Entities.Payment", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("DAL.Entities.Payment", "BookingId")
                        .HasConstraintName("FK__Payment__booking__3B75D760");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("DAL.Entities.Sample", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithMany("Samples")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Sample__bookingI__4D94879B");

                    b.HasOne("DAL.Entities.Participant", "Participant")
                        .WithMany("Samples")
                        .HasForeignKey("ParticipantId")
                        .IsRequired()
                        .HasConstraintName("FK__Sample__particip__4E88ABD4");

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Samples")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Sample__userID__4CA06362");

                    b.Navigation("Booking");

                    b.Navigation("Participant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.TestResult", b =>
                {
                    b.HasOne("DAL.Entities.Booking", "Booking")
                        .WithOne("TestResult")
                        .HasForeignKey("DAL.Entities.TestResult", "BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__TestResul__booki__44FF419A");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.HasOne("DAL.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__roleID__286302EC");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IncludeSurcharge", b =>
                {
                    b.HasOne("DAL.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__IncludeSu__servi__300424B4");

                    b.HasOne("DAL.Entities.SurchargePrice", null)
                        .WithMany()
                        .HasForeignKey("SurchargeId")
                        .IsRequired()
                        .HasConstraintName("FK__IncludeSu__surch__30F848ED");
                });

            modelBuilder.Entity("DAL.Entities.Booking", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Payment");

                    b.Navigation("Samples");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("DAL.Entities.Participant", b =>
                {
                    b.Navigation("Samples");
                });

            modelBuilder.Entity("DAL.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAL.Entities.Service", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DAL.Entities.TestResult", b =>
                {
                    b.Navigation("DetailResults");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("BookingUpdateByNavigations");

                    b.Navigation("BookingUsers");

                    b.Navigation("Consultants");

                    b.Navigation("Samples");
                });
#pragma warning restore 612, 618
        }
    }
}
